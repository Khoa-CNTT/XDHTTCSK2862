var UserAPI = 'http://localhost:3000/user';//'http://localhost:8080/event-management/users';
var RoleAPI = 'http://localhost:3000/role';
function start() {
    getData((uses, role) => {
        renderUsers(uses, role)

    });

}
start();
function getData(callback) {
    let token = localStorage.getItem("token"); // L·∫•y token t·ª´ localStorage

    if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
    }

    Promise.all([
        fetch(UserAPI, {
            headers: {
               "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        }).then(res => res.json()),

        fetch(RoleAPI, {
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        }).then(res => res.json())

    ]).then(([uses, role]) => {
        callback(uses, role);
    })
        .catch(error => console.error("L·ªói khi l·∫•y d·ªØ li·ªáu:", error));
}

//render table data
function renderUsers(users, roles) {
    var listUsersBlock = document.querySelector('#list-user tbody');
    if (!listUsersBlock) return;

    console.log("Users:", users);
    if (!users || users.length === 0) {
        console.warn("Danh s√°ch users r·ªóng!");
        return;
    }

    // H·ªßy DataTables n·∫øu ƒë√£ kh·ªüi t·∫°o
    if ($.fn.DataTable.isDataTable('#list-user')) {
        $('#list-user').DataTable().destroy();
    }

    var htmls = users.map(function (user ) {
        var role = roles.find(r => r.id === user.role_id);
        var roleName = role ? role.name : "Kh√¥ng x√°c ƒë·ªãnh";
        var status = user.status === 1 ? "Ho·∫°t ƒë·ªông" : "B·ªã kh√≥a";

        return `
            <tr class="list-user-${user.id} " style="max-width: 100px;">
                <td>${user.email}</td>
                <td>${user.last_name}</td>
                <td>${user.first_name}</td>
                <td>${roleName}</td>
                <td>${user.phone_number}</td>
                <td>${user.created_at}</td>
                <td class="text-center">
                    <div class="action-dropdown">
                        <button class="btn btn-light action-btn">...</button>
                        <div class="dropdown-content">
                            <button class="dropdown-item delete-btn" data-id="${user.id}">Xo√°</button>
                            <button class="dropdown-item update-btn" data-id="${user.id}">N√¢ng c·∫•p</button>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    });

    listUsersBlock.innerHTML = htmls.join('');

    if (!listUsersBlock.innerHTML.trim()) {
        console.warn("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.");
        return;
    }

    // Kh·ªüi t·∫°o l·∫°i DataTables
    var table = $('#list-user').DataTable({
        "order": [[6, "desc"]],
        "language": {
            "search": "T√¨m ki·∫øm:",
            "lengthMenu": "Hi·ªÉn th·ªã _MENU_ ng∆∞·ªùi d√πng",
            "info": "Hi·ªÉn th·ªã _START_ ƒë·∫øn _END_ c·ªßa _TOTAL_ ng∆∞·ªùi d√πng",
            "infoEmpty": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "zeroRecords": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
            "paginate": {
                "first": "ƒê·∫ßu",
                "last": "Cu·ªëi",
                "next": "Ti·∫øp",
                "previous": "Tr∆∞·ªõc"
            }
        }
    });

    // üõ† G√°n s·ª± ki·ªán d√πng delegate ƒë·ªÉ dropdown ho·∫°t ƒë·ªông ƒë√∫ng tr√™n m·ªçi trang
    $('#list-user tbody').off('click').on('click', '.action-btn', function (event) {
        let dropdown = $(this).next('.dropdown-content');
        $('.dropdown-content').not(dropdown).hide(); // ·∫®n dropdown kh√°c
        dropdown.toggle();
        event.stopPropagation();
    });

    // X·ª≠ l√Ω s·ª± ki·ªán xo√° ng∆∞·ªùi d√πng
    $('#list-user tbody').on('click', '.delete-btn', function () {
        let userId = $(this).data('id');
        handleDeleteUser(userId);
    });
     // X·ª≠ l√Ω s·ª± ki·ªán n√¢ng c·∫•p 
     $('#list-user tbody').on('click', '.update-btn', function () {
        let userId = $(this).data('id');
        updateUserRole(userId);
    });

    // ƒê√≥ng dropdown khi b·∫•m ra ngo√†i
    $(document).off('click').on('click', function () {
        $('.dropdown-content').hide();
    });
}

//T·∫°o Xo√° h·ª£p ƒë·ªìng
function handleDeleteUser(id) {
    var options = {
        method: 'DELETE',
        headers: {
            "Content-Type": "application/json",
        },

    };
    fetch(UserAPI + '/' + id, options)
        .then(function (respone) {
            return respone.json();
        })
        .then(function () {
            var listUser = document.querySelector('.list-user-' + id)
            if (listUser) {
                listUser.remove();
            }
            alert("Xo√° ng∆∞·ªùi d√πng th√†nh c√¥ng!");
        })
        .catch(function () {
            alert("Xo√° kh√¥ng th√†nh c√¥ng!");
        });

}
function updateUserRole(userId) {
    const modalElement = document.getElementById("upgradeRoleModal");
    const modal = new bootstrap.Modal(modalElement);
    const roleSelect = document.getElementById("roleSelect");

    // Hi·ªÉn th·ªã modal ngay l·∫≠p t·ª©c
    modal.show();

    // L·∫•y danh s√°ch roles
    fetch(RoleAPI, {
        headers: {
            "Authorization": `Bearer ${localStorage.getItem("token")}`,
            "Content-Type": "application/json"
        }
    })
    .then(res => res.json())
    .then(roles => {
        roleSelect.innerHTML = roles.map(role => 
            `<option value="${role.id}">${role.name}</option>`
        ).join('');
    })
    .catch(error => console.error("L·ªói khi l·∫•y roles:", error));

    // X·ª≠ l√Ω n√∫t L∆∞u
    document.getElementById("saveRole").onclick = function() {
        const newRoleId = roleSelect.value;
        fetch(`${UserAPI}/${userId}`, {
            method: "PATCH",
            headers: {
                "Authorization": `Bearer ${localStorage.getItem("token")}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ role_id: newRoleId })
        })
        .then(response => response.json())
        .then(data => {
            console.log("C·∫≠p nh·∫≠t th√†nh c√¥ng", data);
            modal.hide();
            start();
        })
        .catch(error => console.error("L·ªói c·∫≠p nh·∫≠t quy·ªÅn:", error));
    };
}

// Kh·ªüi t·∫°o s·ª± ki·ªán
document.addEventListener("DOMContentLoaded", function() {
    // Ch·ªâ g·∫Øn s·ª± ki·ªán update-btn m·ªôt l·∫ßn
    $('#list-user tbody').off('click', '.update-btn').on('click', '.update-btn', function() {
        const userId = $(this).data('id');
        updateUserRole(userId);
    });
});